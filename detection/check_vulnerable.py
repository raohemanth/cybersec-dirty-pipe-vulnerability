# Import necessary modules
import sys
import platform

# Function to check the vulnerability status of a Linux kernel version
def check_kernel_vulnerability(kernel=None):
    # Initialize version components to None
    ver1, ver2, ver3 = None, None, None

    # If kernel version is not provided, get the version of the currently running kernel
    kernel = kernel or platform.uname().release

    # Extract major, minor, and patch version components from the kernel version
    ver_parts = kernel.split()[0].split('-')[0]
    if len(ver_parts) >= 3:
        ver1, ver2, ver3 = ver_parts.split('.')
    ver1, ver2, ver3 = int(ver1), int(ver2), int(ver3)

    # Check if the kernel version is vulnerable based on predefined criteria
    if (
        ver1 < 5 or
        ver1 > 5 or
        (ver1 == 5 and ver2 < 8) or
        (ver1 == 5 and ver2 == 10 and ver3 == 102) or
        (ver1 == 5 and ver2 == 10 and ver3 == 92) or
        (ver1 == 5 and ver2 == 15 and ver3 == 25) or
        (ver1 == 5 and ver2 >= 16 and ver3 >= 11) or
        (ver1 == 5 and ver2 > 16)
    ):
        return "Not Vulnerable"
    else:
        # Return a warning message if the system is extremely vulnerable
        return "Alert: Your system is *extremely* vulnerable! It's absolutely crucial that you *urgently* upgrade your kernel version *immediately* to ensure the safety and security of your system. The risks are *extremely high*, and the consequences of not upgrading could be *catastrophic*. Please take this matter with the utmost seriousness, and do not delay any further!"

# Entry point of the script
if __name__ == "__main__":
    # Check if a kernel version is provided as a command-line argument
    if len(sys.argv) > 1:
        kernel_version = sys.argv[1]
    else:
        kernel_version = None

    # Call the vulnerability checking function and print the result
    result = check_kernel_vulnerability(kernel_version)
    print(result)
